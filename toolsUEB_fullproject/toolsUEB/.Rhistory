library("airway")
install.packages("airway")
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("airway", version = "3.8")
library("airway")
##Load the data
library("airway")
#to find out where on your computer the files from a package have been installed.
indir <- system.file("extdata", package="airway", mustWork=TRUE)
list.files(indir)
#read the targets file of the experiment
csvfile <- file.path(indir, "sample_table.csv")
sampleTable <- read.csv(csvfile, row.names = 1)
sampleTable
##store the bam files in object filenames
filenames <- file.path(indir, paste0(sampleTable$Run, "_subset.bam"))
file.exists(filenames)
filenames
##Indicate that these are bam files
library("Rsamtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools", version = "3.8")
##Indicate that these are bam files
library("Rsamtools")
bamfiles <- BamFileList(filenames, yieldSize=2000000)
##Defining gene models
library("GenomicFeatures")
BiocManager::install("GenomicFeatures", version = "3.8")
##Defining gene models
library("GenomicFeatures")
gtffile <- file.path(indir,"Homo_sapiens.GRCh37.75_subset.gtf")
txdb <- makeTxDbFromGFF(gtffile, format = "gtf", circ_seqs = character())
txdb
##resume the exons by gene
ebg <- exonsBy(txdb, by="gene")
ebg
##Generating count Matrices
library("GenomicAlignments")
se <- summarizeOverlaps(features=ebg, reads=bamfiles,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE )
##See the count matrix
se
assay(se)
#dimensions of the count matrix
dim(se)
#############################################################################
##START FROM THE COMPLETE DATA
#############################################################################
data("airway")
se <- airway
dim(se)
View(sampleTable)
#reorder the levels
library(magrittr)
se$dex %<>% relevel("untrt") ##no tratado
se$dex
##Milions of fragments aligned to the genes
round( colSums(assay(se)) / 1e6, 1 )
##Check that the object is correct
colData(se)
##Make a DESeqDataSet object
library("DESeq2")
BiocManager::install("DESeq2", version = "3.8")
##Make a DESeqDataSet object
library("DESeq2")
dds <- DESeqDataSet(se, design = ~ cell + dex)
##Filter out those rows without any count
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
nrow(dds)
##variance stabilizing transformationÂ (VST)
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
##Sample distances.
sampleDists <- dist(t(assay(vsd))) ##control de calidad
sampleDists
##Heatmap + Hierarchical clustering
library("pheatmap")
BiocManager::install("pheatmap", version = "3.8")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$dex, vsd$cell, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
##Heatmap + Hierarchical clustering
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$dex, vsd$cell, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
##Principal Component Analysis Plot
plotPCA(vsd, intgroup = c("dex", "cell"))
##Differential Expression Analysis
dds <- DESeq(dds)
##building results table
res <- results(dds, contrast=c("dex","trt","untrt"))
##Toptable
head(res[order(res$padj),])
##Information about the columns of the results table
mcols(res, use.names = TRUE)
##Subset the significant genes with strongest downregulation
resSig <- subset(res, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
##Subset the significant genes with strongest upregulation
head(resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ])
##Heatmap of genes
library("genefilter")
BiocManager::install("genefilter", version = "3.8")
##Heatmap of genes
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("cell","dex")])
pheatmap(mat, annotation_col = anno)
##Results annotation
library("org.Hs.eg.db")
library("AnnotationDbi")
BiocManager::install("org.Hs.eg.db", version = "3.8")
res$symbol <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
##Results annotation
library("org.Hs.eg.db")
library("AnnotationDbi")
res$symbol <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
View(resOrdered)
View(resOrdered)
##Exporting the results
resOrderedDF <- as.data.frame(resOrdered)[1:100, ]
write.csv(resOrderedDF, file = "results.csv")
getwd()
View(bamfiles)
View(mat)
install.packages("colourpicker")
shiny::runApp('C:/Users/elisa/Desktop/projecte')
runApp('C:/Users/elisa/Desktop/projecte')
install.packages("rlang")
runApp('C:/Users/elisa/Desktop/projecte')
shiny::runApp('C:/Users/elisa/Desktop/projecte')
shiny::runApp('C:/Users/elisa/Desktop/projecte')
runApp('C:/Users/elisa/Desktop/projecte')
shiny::runApp('C:/Users/elisa/Desktop/projecte')
BiocManager::install()
shiny::runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
shiny::runApp('toolsUEB/toolsUEB')
topTab <- read.csv("ExpressAndTop_AvsB.csv2")
topTab <- read.csv2("ExpressAndTop_AvsB.csv2")
topTab
View(topTab)
library(ggplot2)
class(topTab)
class(topTab)
ggplot(topTab, aes(x=logFC, y=-log(P.Value))) +
geom_point(shape=1)
ggplot(topTab, aes(x=logFC, y=-log(P.Value))) +
geom_point(shape=1) scale_color_manual(breaks = c("adj.P.Val<0.05", "abs(logFC)>1", "adj.P.Val<0.05 & abs(logFC)>1"),
values=c("red", "orange", "green"))
ggplot(topTab, aes(x=logFC, y=-log(P.Value))) +
geom_point(shape=1)+ scale_color_manual(breaks = c("adj.P.Val<0.05", "abs(logFC)>1", "adj.P.Val<0.05 & abs(logFC)>1"),
values=c("red", "orange", "green"))
ggplot(topTab, aes(x=logFC, y=-log(P.Value))) +
geom_point(shape=1) + scale_color_manual(breaks = c("adj.P.Val<0.05", "abs(logFC)>1", "adj.P.Val<0.05 & abs(logFC)>1"),
values=c("red", "orange", "green"))
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=logFC)) +
geom_point(shape=1) + scale_color_manual(breaks = c("adj.P.Val<0.05", "abs(logFC)>1", "adj.P.Val<0.05 & abs(logFC)>1"),
values=c("red", "orange", "green"))
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=P.Value)) +
geom_point(shape=1) + scale_color_manual(breaks = c("adj.P.Val<0.05", "abs(logFC)>1", "adj.P.Val<0.05 & abs(logFC)>1"),
values=c("red", "orange", "green"))
topTab$col = NA
topTab$col = NA
topTab$col[topTab$adj.P.Val < 0.05] = "g1"
topTab$col[abs(topTab$logFC) > 1] = "g2"
topTab$col[topTab$adj.P.Val<0.05 & abs(topTab$logFC)>1] = "g3"
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=col)) +
geom_point(shape=1)
if(topTab$adj.P.Val<=0.05 && topTab$logFC>=1){
topTab$volcThreshold="TRUE"
}else{
topTab$volcThreshold="FALSE"
}
topTab
View(topTab)
trues <- topTab[topTab$volcThreshold=="TRUE"]
sel1 <- topTab[topTab[, "adj.P.Val"] < 0.05, ]
sel1
View(sel1)
selected <- sel1[sel1[, "logFC"] > 1, ]
View(selected)
if(topTab$adj.P.Val<=0.05){
if(topTab$adj.P.Val>=1){
topTab$volcThreshold="TRUE"
}else{
topTab$volcThreshold="FALSE"
}
}else{
topTab$volcThreshold="FALSE"
}
if(topTab$adj.P.Val<=0.05){
if(topTab$logFC>=1){
topTab$volcThreshold="TRUE"
}else{
topTab$volcThreshold="FALSE"
}
}else{
topTab$volcThreshold="FALSE"
}
if((topTab$adj.P.Val<=0.05)&&(topTab$logFC>=1)){
topTab$volcThreshold="TRUE"
}else{
topTab$volcThreshold="FALSE"
}
View(topTab)
if((topTab[i]$adj.P.Val<=0.05)&&(topTab[i]$logFC>=1)){
topTab$volcThreshold="TRUE"
}else{
topTab$volcThreshold="FALSE"
}
for(i in 1:ncol(topTab))
if(topTab[i,topTab[i,"adj.P.Val"] < 0.05]){
topTab$volcThreshold=="TRUE"
}
for(i in 1:ncol(topTab))
if(topTab[i,topTab[i,"adj.P.Val"] < 0.05]){
topTab$volcThreshold=="TRUE"
}
for(i in 1:nrow(topTab))
for(i in 1:nrow(topTab)){
if(topTab[i,topTab[i,"adj.P.Val"] < 0.05]){
topTab$volcThreshold=="TRUE"
}
}
for(i in 1:nrow(topTab)){
if(topTab[i,"adj.P.Val"] < 0.05){
topTab$volcThreshold=="TRUE"
}
}
View(topTab)
for(i in 1:nrow(topTab)){
if(topTab[i,"adj.P.Val"] < 0.05){
topTab$volcThreshold=="TRUE"
}
}
View(topTab)
if(topTab[,"adj.P.Val"]<0.05){
topTab$volcThreshold=="TRUE"
}
if([topTab[topTab[,"adj.P.Val"]<0.05,]){
topTab$volcThreshold=="TRUE"
}
if(topTab[topTab[,"adj.P.Val"]<0.05,]){
topTab$volcThreshold=="TRUE"
}
for(i in 1:nrow(topTab)){
if(topTab[i,"adj.P.Val"] < 0.05){
topTab$volcThreshold=="TRUE"
}
}
View(topTab)
f1 <- filter(topTab, adj.P.Val < 0.05)
f1
f1 <- filter(topTab, adj.P.Val < 0.05)
topTab <- read.csv2("ExpressAndTop_AvsB.csv2")
View(topTab)
f1 <- filter(topTab, adj.P.Val < 0.05)
f1 <- filter(topTab, "adj.P.Val" < 0.05)
f1
View(f1)
f1 <- filter(topTab, adj.P.Val < 0.05)
library(dplyr)
f1 <- filter(topTab, adj.P.Val < 0.05)
f1
View(f1)
f1 <- filter(topTab, adj.P.Val < 0.05 && logFC>1)
View(f1)
f1 <- filter(topTab, adj.P.Val < 0.05, logFC>1)
View(f1)
if(f1){
topTab$volcThreshold=="TRUE"
}
for(i in 1:nrow(topTab)){
f1 <- filter(topTab, adj.P.Val < 0.05, logFC>1)
if(f1){
topTab$volcThreshold=="TRUE"
}
}
topTab$adj.P.Val<0.05
(topTab$adj.P.Val<0.05)&&(topTab$logFC>1)
(topTab$adj.P.Val<0.05),(topTab$logFC>1)
(topTab$adj.P.Val<0.05)(topTab$logFC>1)
(topTab$logFC>1)
all(topTab$adj.P.Val<0.05,topTab$logFC>1)
topTab %in% c('topTab$adj.P.Val<0.05', 'topTab$logFC>1')
topTab %in% c(topTab$adj.P.Val<0.05, topTab$logFC>1)
which(topTab$adj.P.Val<0.05)
subset(topTab$adj.P.Val<0.05)
filter(topTab,adj.P.Val<0.05,topTab$logFC>1)
f1 <- filter(topTab,adj.P.Val<0.05,topTab$logFC>1)
View(f1)
f1 = "TRUE"
if(f1){
topTab$Threshold=="TRUE";
}else{
topTab$Threshold=="FALSE";
}
View(topTab)
if(f1){
topTab$Threshold=="TRUE";
}else{
topTab$Threshold=="FALSE";
}
topTab$volcThreshold <- filter(topTab,adj.P.Val<0.05,topTab$logFC>1) = "FRUE"
topTab$volcThreshold <- filter(topTab,adj.P.Val<0.05,topTab$logFC>1)
for(i in 1:nrow(topTab)){
(topTab[i]$adj.P.Val<0.05)&&(topTab[i]$logFC>1)
}
([topTab[i]$adj.P.Val<0.05)&&(topTab[i]$logFC>1,])
(topTab[i]$adj.P.Val<0.05)&&(topTab[i]$logFC>1,)
([topTab[i]$adj.P.Val<0.05)&&(topTab[i]$logFC>1],)
for(i in 1:nrow(topTab)){
([topTab[i]$adj.P.Val<0.05)&&(topTab[i]$logFC>1],)
}
for(i in 1:nrow(topTab)){
topTab[i][topTab$adj.P.Val<0.05&&topTab[i]$logFC>1,]
}
topTab[i,][topTab$adj.P.Val<0.05&&topTab[i]$logFC>1,]
for(i in 1:nrow(topTab)){
topTab[i][topTab$adj.P.Val<0.05&&topTab[i]$logFC>1,],
}
for(i in 1:nrow(topTab)){
topTab[i][topTab$adj.P.Val<0.05&&topTab[i]$logFC>1,]
}
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05&&topTab$logFC>1, "TRUE", "FALSE")
View(topTab)
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05, "TRUE", "FALSE")
View(topTab)
topTab$volcThreshold <- ifelse([topTab$adj.P.Val<0.05,topTab$logFC>1], "TRUE", "FALSE")
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05,topTab$logFC>1, "TRUE", "FALSE")
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05&topTab$logFC>1, "TRUE", "FALSE")
View(topTab)
library(ggrepel)
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=col, label=SymbolsA)) +
geom_point(shape=1) + geom_text_repel(data = subset(topTab, volcThreshold=="TRUE")[1:20,])
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05&topTab$logFC>1, "TRUE", "FALSE")
View(topTab)
topTab$col = NA
topTab$col[topTab$adj.P.Val < 0.05] = "g1"
topTab$col[abs(topTab$logFC) > 1] = "g2"
topTab$col[topTab$adj.P.Val<0.05 & abs(topTab$logFC)>1] = "g3"
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=col, label=SymbolsA)) +
geom_point(shape=1) + geom_text_repel(data = subset(topTab, volcThreshold=="TRUE")[1:20,])
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=col, label=SymbolsA)) +
geom_point(shape=1) + geom_text_repel(data = subset(topTab, volcThreshold=="TRUE")[1:20,],
size = 2, vjust = -0.25, hjust = 1.1, segment.size=0.1, col="gray20")
topTab$col = NA
library(ggplot2)
library(dplyr)
library(ggrepel)
topTab <- read.csv2("ExpressAndTop_AvsB.csv2")
View(topTab)
class(topTab)
topTab$volcThreshold <- ifelse(topTab$adj.P.Val<0.05&topTab$logFC>1, "TRUE", "FALSE")
View(topTab)
topTab$col = NA
topTab$col[topTab$adj.P.Val < 0.05] = "g1"
topTab$col[abs(topTab$logFC) > 1] = "g2"
topTab$col[topTab$adj.P.Val<0.05 & abs(topTab$logFC)>1] = "g3"
ggplot(topTab, aes(x=logFC, y=-log(P.Value), color=col, label=SymbolsA)) +
geom_point(shape=1) + geom_text_repel(data = subset(topTab, volcThreshold=="TRUE")[1:20,],
size = 2, vjust = -0.25, hjust = 1.1, segment.size=0.1, col="gray20")
View(topTab)
shiny::runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
runApp('toolsUEB/toolsUEB')
TxDb.Hsapiens.UCSC.hg19.knownGene
runApp('toolsUEB/toolsUEB')
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
runApp('toolsUEB/toolsUEB')
install.packages("digest")
install.packages("digest")
shiny::runApp()
