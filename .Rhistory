cexCol=0.8, density.info="none")
dend.column <- heatgenes2$colDendrogram
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=dend.column, col=coloritos,
scale="row",  density.info="none", trace="none", RowSideColors=mycolhc, cexRow=0.1,
cexCol=0.7)
heatgenes2  <- heatmap.2 (m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dev.off()
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dev.off()
heatgenes2=heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dend.column <- heatgenes2$colDendrogram
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=dend.column, col=coloritos,
scale="row",  density.info="none", trace="none", RowSideColors=mycolhc, cexRow=1,
cexCol=1)
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=1, density.info="none")
topgenes = genes[genes[, "adj.P.Val"] < 0.001, ]
View(topgenes)
topups = topgenes[topgenes[, "logFC"] > 1, ]
View(topups)
topdowns = topgenes[topgenes[, "logFC"] < -1, ]
View(topdowns)
topgenes2 = genes[genes[, "adj.P.Val"] < 0.05, ]
topgenes2 = genes[genes[, "adj.P.Val"] < 0.05, ]
topups2 = topgenes2[topgenes[, "logFC"] > 1, ]
topdowns2 = topgenes2[topgenes[, "logFC"] < -1, ]
View(topups2)
View(topdowns2)
with(genes, plot(genes$logFC, -log(genes$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topgenes, plot(topgenes$logFC, -log(topgenes$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topups, plot(topups$logFC, -log(topups$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topdowns, plot(topdowns$logFC, -log(topdowns$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topups2, plot(topups2$logFC, -log(topups2$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topdowns2, plot(topdowns2$logFC, -log(topdowns2$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2))
with(topups2, plot(topups2$logFC, -log(topups2$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2), ylim=c(-10,20))
with(topups2, plot(topups2$logFC, -log(topups2$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2), ylim=c(-20,20))
with(topdowns2, plot(topdowns2$logFC, -log(topdowns2$P.Value)), pch=20, main="Volcano plot", xlim=c(0,2), ylim=c(-20,20))
topgenes = genes[genes[, "adj.P.Val"] < 0.001, ]
gene.symbols <- getSYMBOL(rownames(topgenes), "mogene10sttranscriptcluster")
source("http://bioconductor.org/biocLite.R")
biocLite("oligo")
biocLite("pd.mogene.1.0.st.v1")
biocLite("arrayQualityMetrics")
biocLite("genefilter")
biocLite("limma")
biocLite("xtable")
biocLite("gplots")
biocLite("mogene10sttranscriptcluster.db")
library("oligo")
library("pd.mogene.1.0.st.v1")
library("arrayQualityMetrics")
library("genefilter")
library("limma")
library("xtable")
library("gplots")
library("mogene10sttranscriptcluster.db")
library ("RColorBrewer")
gene.symbols <- getSYMBOL(rownames(topgenes), "mogene10sttranscriptcluster")
library("annotate")
gene.symbols <- getSYMBOL(rownames(topgenes), "mogene10sttranscriptcluster")
biocLite("hugene10sttranscriptcluster.db")
library("hugene10sttranscriptcluster.db")
gene.symbols <- getSYMBOL(rownames(topgenes), "mogene10sttranscriptcluster")
gene.symbol <- getSYMBOL(rownames(topgenes), "mogene10sttranscriptcluster")
selected <- genes[1:15,]
View(selected)
geneID <- rownames(genes)
View(geneID)
myInterestingGenes <- rownames(selected)
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,annot=annFUN.db,
affyLib =
"clariomshumantranscriptcluster.db")
biocLite("topGO")
library("topGO")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,annot=annFUN.db,
affyLib =
"clariomshumantranscriptcluster.db")
biocLite("clariomshumantranscriptcluster.db")
library("clariomshumantranscriptcluster.db")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,annot=annFUN.db,
affyLib =
"clariomshumantranscriptcluster.db")
geneID
selected <- genes[1:15,]
selected
topT2 <- read.csv("results/TopTable_end.csv",sep = ",")
topT2
rownames(topT2)
hwrite(listaArchivos,file.path(resultsDir, "listaArchivos.html"))
library(knitr)
opts_chunk$set(fig.path='images/grafic', tidy=FALSE, cache=FALSE)
installifnot <- function (pckgName){
if (!(require(pckgName, character.only=TRUE))) {
source("https://bioconductor.org/biocLite.R")
biocLite(eval(pckgName), suppressUpdates=TRUE)
}else{
print(paste("Package", pckgName, "already installed", sep=" "))
}
}
installifnot("Biobase")
installifnot("affy")
installifnot("arrayQualityMetrics")
installifnot("genefilter")
installifnot("multtest")
installifnot("limma")
installifnot("hgu133a.db")
installifnot("annotate")
installifnot("annaffy")
installifnot("hwriter")
installifnot("gplots")
installifnot("GOstats")
installifnot("GSA")
workingDir <-getwd()
dataDir <-file.path(workingDir, "data")
resultsDir <- file.path(workingDir,"results")
celfilesDir <- file.path(workingDir,"celfiles")
setwd(workingDir)
require(Biobase)
my.targets <-read.AnnotatedDataFrame(file.path(dataDir,"targets.txt"),
header = TRUE, row.names = 1)
top5 <- genes$EntrezsA[1:5]
top5
require(annotate)
geneSymbol5.3 <- getSYMBOL(top5,"hguav2.db")
require(annotate)
geneSymbol5.3 <- getSYMBOL(top5,"hguav2.db")
geneSymbol5.3 <- getSYMBOL(top5,"hgu95av2.db")
require(hgu95av2.db)
biocLite("hgu95av2.db")
library("hgu95av2.db")
require(hgu95av2.db)
require(annotate)
geneSymbol5.3 <- getSYMBOL(top5,"hgu95av2.db")
top5 <- genes$X[1:5]
require(hgu95av2.db)
require(annotate)
geneSymbol5.3 <- getSYMBOL(top5,"hgu95av2.db")
geneSymbol5.1 <- unlist(mget(top5, hgu95av2SYMBOL))
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
geneSymbol5.1
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
geneSymbol5.1
top5 <- genes$EntrezsA[1:5]
require(hgu95av2.db)
require(annotate)
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
geneSymbol5.1
top5 <- genes$EntrezsA[1:5]
require(hgu95av2.db)
require(annotate)
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
hgu95av2()
require(annotate)
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
top5 <- genes$EntrezsA[1:5]
require(hgu95av2.db)
hgu95av2()
require(annotate)
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
geneSymbol5.1
top5 <- genes$X[1:5]
require(hgu95av2.db)
hgu95av2()
require(annotate)
geneSymbol5.1 <- unlist(mget(as.character(top5), hgu95av2SYMBOL))
library("oligo")
library("pd.mogene.1.0.st.v1")
library("arrayQualityMetrics")
library("genefilter")
library("limma")
library("xtable")
library("gplots")
library("mogene10sttranscriptcluster.db")
library("hugene10sttranscriptcluster.db")
library("clariomshumantranscriptcluster.db")
library ("RColorBrewer")
library("annotate")
library("topGO")
library("hgu95av2.db")
genes <- read.csv2("~/ExpressAndTop_AvsB.csv2")
selected <- genes[1:15,]
selected
geneID <- rownames(genes)
geneID
geneID <- rownames(genes$X)
geneID
geneID <- genes$X
geneID
selected
myInterestingGenes <- rownames(selected)
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,annot=annFUN.db,
affyLib =
"clariomshumantranscriptcluster.db")
geneList
myInterestingGenes <- rownames(selected)
myInterestingGenes
selected
myInterestingGenes <- selected$X
myInterestingGenes
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
geneList
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,annot=annFUN.db,
affyLib =
"clariomshumantranscriptcluster.db")
mtcars
rownames(mtcars)
topTab <- read.csv("ExpressAndTop_AvsB.csv2")
topTab <- read.csv2("ExpressAndTop_AvsB.csv2")
rownames(topTab)
class(topTab)
topTab
topTab2 <- read.csv("results/Selected_Genes_in_comparison.;Effect of Induction;.csv", sep = ";")
class(topTab2)
topTab2
rownames(topTab2)
topTab2
View(topTab2)
View(mtcars)
rownames(topTab) <- topTab$X
View(topTab)
whichGenes <- topTab["P.Value"]<0.05
whichGenes
selectedIDs <-rownames(topTab)[whichGenes]
whichGenes <- topTab["adj.P.Val"]<0.05
whichGenes
source("http://bioconductor.org/biocLite.R")
biocLite("GOstats")
library("GOstats")
biocLite("hgu133a.db")
library("hgu133a.db")
genesIDs <- unique(getEG(rownames(topTab)[whicgenes],"hgu133a.db"))
biocLite("annotate")
library("annotate")
genesIDs <- unique(getEG(rownames(topTab)[whicgenes],"hgu133a.db"))
genesIDs <- unique(getEG(rownames(topTab)[whichGenes],"hgu133a.db"))
genesIDs
entrezUniverse = unique(getEG(rownames(topTab),"hgu133a.db"))
entrezUniverse
GOparams = new("GOHyperGParams", geneIds=genesIDs, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",ontology="BP",pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
KEGGparams = new("KEGGHyperGParams", geneIds=genesIDs, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",pvalueCutoff=0.01,testDirection="over")
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
KEGGhyper
GOhyper = hyperGTest(GOparams)
biocLite("topGO")
library("topGO")
selected <- topTab[1:15,]
selected
geneID <- rownames(topTab)
geneID
myInterestingGenes <- rownames(selected)
myInterestingGenes
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
names(geneList) <- geneID
biocLite("clariomshumantranscriptcluster.db")
library(clariomshumantranscriptcluster.db)
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=annFUN.db,
affyLib
"clariomshumantranscriptcluster.db")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=annFUN.db,
affyLib ="clariomshumantranscriptcluster.db")
biocLite("pd.clariom.s.human")
library(pd.clariom.s.human)
geneID <- rownames(topTab)
myInterestingGenes <- rownames(selected)
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
names(geneList) <- geneID
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=annFUN.db,
affyLib ="clariomshumantranscriptcluster.db")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=org.Hs.eg.db,
affyLib ="clariomshumantranscriptcluster.db")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=org.Hs.eg.db,
affyLib ="clariomshumantranscriptcluster.db")
biocLite("ALL")
library(ALL)
affyLib <_ paste(annotation(ALL), "db", sep = ".")
affyLib <- paste(annotation(ALL), "db", sep = ".")
biocLite("ALL")
library(ALL)
data(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=annFUN.db,
affyLib = affyLib)
resultFisher <- runTest(top_GO_data, algorithm = "classic", statistic = "fisher")
geneID <- rownames(topTab)
selected <- topTab[1:15,]
myInterestingGenes <- rownames(selected)
geneList <- factor(as.integer(geneID %in% myInterestingGenes))
names(geneList) <- geneID
affyLib <- paste(annotation(ALL), "db", sep = ".")
top_GO_data <- new("topGOdata", ontology = "BP", allGenes = geneList,
nodeSize = 10,
annot=annFUN.db,
affyLib = affyLib)
resultFisher <- runTest(top_GO_data, algorithm = "classic", statistic = "fisher")
resultKS <- runTest(top_GO_data, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(top_GO_data, algorithm = "elim", statistic = "ks")
allRes <- GenTable(top_GO_data, classicFisher = resultFisher,
classicKS = resultKS, elimKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
kable(allRes)
library(knitr)
kable(allRes)
showSigOfNodes(top_GO_data,
score(resultKS.elim), firstSigNodes = 5,
useInfo = 'all')
kable(allRes)
View(allRes)
genes2 <- read.csv("~/Datos.Normalizados.Filtrados.csv2",sep = ";")
class(genes2)
m<-data.matrix(genes2, rownames.force = NA)
class(m)
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
library ("RColorBrewer")
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
dev.off()
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
library("gplots")
m
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
dev.off()
par(mar = rep(2,4))
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
dev.off()
par(mfrow=c(1,1))
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
y <- scale(m)
hr <- hclust(as.dist(1-cor(t(y), method="pearson")))
hc <- hclust(as.dist(1-cor(y, method="pearson")), method="complete")
mycl  <- cutree(hr, h=max(hr$height)/1.5); mycolhc <-  rainbow(length(unique(mycl)),
start=0.1, end=0.9); mycolhc <-  mycolhc[as.vector(mycl)]
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.1, cexCol=0.7)
dev.off()
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=1, density.info="none")
heatgenes2
dend.column <- heatgenes2$colDendrogram
genesSel = genes2[1:15,]
class(genesSel)
m<-data.matrix(genesSel, rownames.force = NA)
class(m)
m
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
dev.off()
par(mar = rep(2,4))
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
rownames(genes2)
rownames(genes2) <- genes2$X
rownames(genes2)
genesSel = genes2[1:15,]
class(genesSel)
m<-data.matrix(genesSel, rownames.force = NA)
class(m)
m
coloritos <- colorRampPalette(brewer.pal(9, "PuOr"))
dev.off()
par(mar = rep(2,4))
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
y <- scale(m)
hr <- hclust(as.dist(1-cor(t(y), method="pearson")))
hc <- hclust(as.dist(1-cor(y, method="pearson")), method="complete")
mycl  <- cutree(hr, h=max(hr$height)/1.5); mycolhc <-  rainbow(length(unique(mycl)),
start=0.1, end=0.9); mycolhc <-  mycolhc[as.vector(mycl)]
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.1, cexCol=0.7)
dev.off()
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=1, density.info="none")
heatgenes2
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.1, cexCol=0.7)
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.15, cexCol=0.8)
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.15, cexCol=0.8)
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.1, cexCol=0.7)
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
dev.off()
heatgenes2<-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dev.off()
heatgenes2 <-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dev.off()
heatgenes2 <-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
dev.off()
heatgenes2 <-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
dev.off()
heatgenes2 <-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dend.column <- heatgenes2$colDendrogram
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=dend.column, col=coloritos,
scale="row",  density.info="none", trace="none", RowSideColors=mycolhc, cexRow=1,
cexCol=1)
names(mycolhc) <- names(mycl); barplot(rep(10, max(mycl)),
col=unique(mycolhc[hr$labels[hr$order]]), horiz=T,  names=unique(mycl[hr$order]))
clid  <- c(1,3); ysub <- y[names(mycl[mycl%in%clid]),];
hrsub <-  hclust(as.dist(1-cor(t(ysub), method="pearson")), method="complete")
heatmap.2(ysub, Rowv=as.dendrogram(hrsub), Colv=dend.column,
col=coloritos, scale="row", density.info="none", trace="none",
RowSideColors=mycolhc[mycl%in%clid], cexRow=0.1, cexCol=0.7, keysize=1)
clid  <- c(3); ysub <- y[names(mycl[mycl%in%clid]),];
clid  <- c(3); ysub <- y[names(mycl[mycl%in%clid]),];
hrsub <-  hclust(as.dist(1-cor(t(ysub), method="pearson")), method="complete");
heatmap.2(ysub, Rowv=as.dendrogram(hrsub), Colv=dend.column,
col=coloritos, scale="row", density.info="none", trace="none",
RowSideColors=mycolhc[mycl%in%clid], cexRow=0.5, cexCol=0.7, keysize=1)
heatmap.2  (m, key=T, symkey=F, trace="none", scale="column",
col=coloritos, dendrogram = c("column"), Rowv=T, keysize=2, cexRow=0.5,  cexCol=0.5)
y <- scale(m)
hr <- hclust(as.dist(1-cor(t(y), method="pearson")))
hc <- hclust(as.dist(1-cor(y, method="pearson")), method="complete")
mycl  <- cutree(hr, h=max(hr$height)/1.5); mycolhc <-  rainbow(length(unique(mycl)),
start=0.1, end=0.9); mycolhc <-  mycolhc[as.vector(mycl)]
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=coloritos,
scale="row", density.info="none", trace="none", RowSideColors=mycolhc,
cexRow=0.1, cexCol=0.7)
dev.off()
heatgenes2 <-heatmap.2(m, key=T, symkey=F, trace="none",
scale="column", col=coloritos, Rowv=T, RowSideColors=mycolhc, keysize=2, cexRow=0.15,
cexCol=0.8, density.info="none")
heatgenes2
dend.column <- heatgenes2$colDendrogram
dev.off()
heatmap.2(y,  Rowv=as.dendrogram(hr), Colv=dend.column, col=coloritos,
scale="row",  density.info="none", trace="none", RowSideColors=mycolhc, cexRow=1,
cexCol=1)
shiny::runApp('R/SHINY')
runApp('Desktop/projecte/toolsUEB')
runApp('Desktop/projecte/toolsUEB')
shiny::runApp('Desktop/projecte/toolsUEB')
shiny::runApp('Desktop/projecte/toolsUEB')
runApp('Desktop/projecte/toolsUEB')
install.packages("shinycssloaders")
shiny::runApp()
install.packages("shinycssloaders")
shiny::runApp()
runApp('~/R/SHINY')
