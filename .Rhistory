plot.new()
plot.window(xlim, c(0, max(bins)*(height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x)-0.5, ybottom, end(x)+0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
plotRanges
plotRanges(ir)
reduce(ir)
plotRanges(reduce(ir))
disjoin(ir)
plotRanges(disjoin(ir))
ov <- findOverlaps(ir, reduce(ir))
ov
coverage(ir)
plotRanges(coverage(ir))
coverage(ir)
plotRanges(disjoin(ir))
ov <- findOverlaps(ir, reduce(ir)) #encontrar superposiciones entre 2 rangos
ov
ir <- IRanges(start = c(1, 8, 14, 15, 19, 34, 40), width = c(12, 6, 6, 15, 6, 2, 7))
ir
coverage(ir)
ir[1:5]
ir22 <- IRanges(start = c(1,3,5), width = 3)
width(ir22) <- 1 #cambiar el ancho del ir22
ir22
nearest(ir[1:5], ir2)
nearest(ir[1:5], ir22)
shift(ir, 10)
install.packages("seqinr")
library(seqinr)
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
install.packages("seqinr")
install.packages("seqinr")
library(seqinr)
ptm <- proc.time()
seqs <- read.fasta(file = "hg38_ch14.fasta")
proc.time() - ptm
gene <- "hg38_ncbiRefSeq_NM_178586.2"
gene.seq <- seqs[[gene]]
seqs <- read.fasta(file = "hg38_ch14.fasta")
seqs <- read.fasta(file = "sequenceIns.fasta")
seqs <- read.fasta(file = "/home/practiquesueb/Desktop/sequenceIns.fasta")
proc.time() - ptm
seqs <- read.fasta(file = "/home/practiquesueb/Desktop/sequence-1.fasta")
proc.time() - ptm
gene <- "NM_001291897.1"
gene.seq <- seqs[[gene]]
length(gene.seq)
class(seqs)
length(seqs)
names(seqs)
head(seqs)
length(gene.seq)
count(gene.seq, 1)  # mÃ¨tode de la classe SeqFastadna
table(gene.seq)
counts <- count(gene.seq, 1)
barplot(counts,  main = "Nucleotide content", col = c("red", "blue", "green", "yellow"))
count(gene.seq, 2)  # dinucleotids
count(gene.seq, 3)  # trinucleotids
(table(gene.seq) / length(gene.seq)) * 100
gc.content <- GC(gene.seq) * 100
gc.content
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
biocLite("Biostrings")
library(Biostrings)
ptm <- proc.time()
seqs2 <- readDNAStringSet("/home/practiquesueb/Desktop/sequence-1.fasta")
proc.time() - ptm                             # Nota la diferencia del temps de carrega
class(seqs2)
seqs2
names(seqs2)
print(seqs2)
start.seq <- vmatchPattern(DNAString("ATG"), seqs2)
start.seq
stop.seq <- vmatchPattern(DNAString("TAA"), seqs2)
stop.seq
.wrk <- getwd()
.dat <- file.path(.wrk, "data")
.res <- file.path(.wrk, "results")
dir.create(.res)
setwd(res)
source("http://bioconductor.org/biocLite.R")
biocLite("oligo")
biocLite("pd.mogene.1.0.st.v1")
biocLite("arrayQualityMetrics")
biocLite("genefilter")
biocLite("limma")
biocLite("xtable")
biocLite("gplots")
biocLite("mogene10sttranscriptcluster.db")
library("oligo")
library("pd.mogene.1.0.st.v1")
library("arrayQualityMetrics")
library("genefilter")
library("limma")
library("xtable")
library("gplots")
library("mogene10sttranscriptcluster.db")
plotPCA <- function(X, labels = NULL, colors = NULL, dataDesc = "",
scale = FALSE, formapunts = NULL, myCex = 0.8, r = 100000,...)
{
pcX <- prcomp(t(X), scale = scale) # o prcomp(t(X))
loads <- round(pcX$sdev ^ 2 / sum(pcX$sdev ^ 2) * 100, 1)
xlab <- c(paste("PC1", loads[1], "%"))
ylab <- c(paste("PC2", loads[2], "%"))
if (is.null(colors)) colors = 1
plot(pcX$x[, 1:2], xlab = xlab, ylab = ylab, col = colors, pch = formapunts,
xlim = c(min(pcX$x[, 1]) - r, max(pcX$x[, 1]) + r),
ylim = c(min(pcX$x[, 2]) - r, max(pcX$x[, 2]) + r))
text(pcX$x[, 1], pcX$x[, 2], labels, pos = 3, cex = myCex)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep = " "), cex = 0.8)
}
targets <- read.csv(file = file.path(.dat, "targets.csv"), header = TRUE, sep = ";")
targets <- read.csv(file = file.path(.dat, "targets.csv"), header = TRUE, sep = ";")
targets
cel.files <- list.celfiles(file.path(.dat))
cel.files
raw.data <- read.celfiles(file.path(.dat, cel.files))
class(raw.data)
raw.data
eset <- rma(raw.data)
write.exprs(eset, file.path(.res, "norm_data.txt"))
sample.names <- as.character(targets$ShortName)
sample.colors <- as.character(targets$Colors)
pdf(file.path(.res, "QCPlots_Raw.pdf"))
boxplot(raw.data, which = "all", las = 2,
main = "Intensity distribution of RAW data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
boxplot(eset, las = 2,
main = "Intensity distribution of Normalized data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
boxplot(raw.data, which = "all", las = 2,
main = "Intensity distribution of RAW data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
boxplot(eset, las = 2,
main = "Intensity distribution of Normalized data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
b1<-boxplot(raw.data, which = "all", las = 2,
main = "Intensity distribution of RAW data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
b1
clust.euclid.average <- hclust(dist(t(exprs(raw.data))), method = "average")
plot(clust.euclid.average, labels = sample.names,
main = "Hierarchical clustering of RawData",
cex = 0.7,  hang = -1)
norm.clust.euclid.average <- hclust(dist(t(exprs(eset))), method = "average")
plot(norm.clust.euclid.average, labels = sample.names,
main = "Hierarchical clustering of Normalized Data",
cex = 0.7,  hang = -1)
plotPCA(exprs(raw.data), labels = sample.names, dataDesc = "raw data", colors = sample.colors,
formapunts = c(rep(16, 4), rep(17, 4)), myCex = 0.6, r = 100000)
View(plotPCA)
plotPCA(exprs(raw.data), labels = sample.names, dataDesc = "raw data", colors = sample.colors,
formapunts = c(rep(16, 4), rep(17, 4)), myCex = 0.6, r = 100000)
plotPCA(exprs(eset), labels = sample.names, dataDesc = "normalized data", colors = sample.colors,
formapunts = c(rep(16, 4), rep(17, 4)), myCex = 0.6, r = 10)
dev.off()
boxplot(raw.data, which = "all", las = 2,
main = "Intensity distribution of RAW data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
boxplot(eset, las = 2,
main = "Intensity distribution of Normalized data",
cex.axis = 0.6, col = sample.colors, names = sample.names)
plotPCA(exprs(raw.data), labels = sample.names, dataDesc = "raw data", colors = sample.colors,
formapunts = c(rep(16, 4), rep(17, 4)), myCex = 0.6, r = 100000)
plotPCA(exprs(eset), labels = sample.names, dataDesc = "normalized data", colors = sample.colors,
formapunts = c(rep(16, 4), rep(17, 4)), myCex = 0.6, r = 10)
arrayQualityMetrics(eset,  reporttitle = file.path(.res, "Quality Control"), force = TRUE)
annotation(eset) <- "org.Mm.eg.db"
eset_filtered <- nsFilter(eset,
var.func = IQR,
var.cutoff = 0.75,
var.filter = TRUE,
filterByQuantile = TRUE)
print(eset_filtered$filter.log$numLowVar)                  # Number of genes out
print(eset_filtered$eset)                                  # Number of genes in
treat <- targets$grupos
lev <- factor(treat, levels = unique(treat))
design <- model.matrix(~ 0 + lev)
colnames(design) <- levels(lev)
rownames(design) <- sample.names
print(design)
cont.matrix1 <- makeContrasts(Induced.vs.WT = Induced - WT, levels = design)
cont.matrix1
comparison1 <- "Effect of Induction"
fit1 <- lmFit(eset_filtered$eset, design)                 # Fit the linear model
fit.main1 <- contrasts.fit(fit1, cont.matrix1)            # Make comparisons
fit.main1 <- eBayes(fit.main1)                            # Empirical Bayes
topTab <-  topTable (fit.main1, number = nrow(fit.main1),
coef = "Induced.vs.WT",
adjust = "fdr", lfc = abs(3))
head(topTab)
write.csv2(topTab,
file = file.path(.res, paste("Selected_Genes_in_comparison.",
comparison1, ".csv", sep = "")))
print(xtable(topTab, align = "lllllll"), type = "html", html.table.attributes = "",
file = file.path(.res,
paste("Selected_Genes_in_comparison.", comparison1, ".html", sep = "")))
pdf(file.path(.res, "Volcanos.pdf"))
volcanoplot(fit.main1, highlight = 10, names = fit.main1$ID,
main = paste("Differentially expressed genes", colnames(cont.matrix1), sep = "\n"))
abline(v = c(-3, 3))
volcanoplot(fit.main1, highlight = 10, names = fit.main1$ID,
main = paste("Differentially expressed genes", colnames(cont.matrix1), sep = "\n"))
my_frame <- data.frame(exprs(eset))
head(my_frame)
HMdata <- merge(my_frame, topTab, by.x = 0, by.y = 0)
rownames(HMdata) <- HMdata$Row.names
HMdata <- HMdata[, -c(1, 10:15)]
head(HMdata)
HMdata2 <- data.matrix(HMdata, rownames.force = TRUE)
head(HMdata2)
write.csv2(HMdata2, file = file.path(.res, "Data2HM.csv"))
my_palette <- colorRampPalette(c("blue", "red"))(n = 299)
pdf(file.path(resultsDir,"HeatMap InducedvsWT.pdf"))
pdf(file.path(results,"HeatMap InducedvsWT.pdf"))
pdf(file.path(.res,"HeatMap InducedvsWT.pdf"))
heatmap.2(HMdata2,
Rowv = TRUE,
Colv = TRUE,
main = "HeatMap Induced.vs.WT FC>=3",
scale = "row",
col = my_palette,
sepcolor = "white",
sepwidth = c(0.05,0.05),
cexRow = 0.5,
cexCol = 0.9,
key = TRUE,
keysize = 1.5,
density.info = "histogram",
ColSideColors = c(rep("red", 4), rep("blue", 4)),
tracecol = NULL,
srtCol = 30)
dev.off()
all_anota <- data.frame(exprs(eset))
Annot <- data.frame(SYMBOL = sapply(contents(mogene10sttranscriptclusterSYMBOL),
paste, collapse = ", "),
DESC = sapply(contents(mogene10sttranscriptclusterGENENAME),
paste, collapse = ", "))
Annot <- Annot[!Annot$SYMBOL=="NA", ]
Annot <- Annot[!Annot$DESC=="NA", ]
head(Annot)
anotaGenes <- merge(Annot, all_anota, by.x = 0, by.y = 0)
head(anotaGenes)
write.csv2(anotaGenes, file = file.path(.res, "annotated_data.csv"), row.names = FALSE)
rownames(anotaGenes) <- anotaGenes[, 1]
anotaGenes <- anotaGenes[, -1]
anotaGenes.end <- merge(anotaGenes, topTab, by.x = 0, by.y = 0)
topTab.end <- anotaGenes.end[, c(1:3, 12:17, 4:11)]
topTab.end <- topTab.end[order(-topTab.end$B), ]
rownames(topTab.end) <- topTab.end[, 1]
topTab.end <- topTab.end[, -1]
write.csv(topTab.end, file = file.path(.res, "TopTable_end.csv"))
sink(file.path(.res, "session_info.txt"))
sessionInfo()
sink()
pdf(file.path(.res, "Volcanos.pdf"))
volcanoplot(fit.main1, highlight = 10, names = fit.main1$ID,
main = paste("Differentially expressed genes", colnames(cont.matrix1), sep = "\n"))
abline(v = c(-3, 3))
dev.off()
a = as.integer(5);
b = as.numeric(5);
c = a>b
c
class(c)
class(a)
class(b)
a="Elisabet"
b=1987
sprintf("Hola, me llamo %s y nacÃ­ en el aÃ±o %d", a, b)
class(a)
class(b)
v=c(4,5,2,14)
x=3*v
x
x[1]
mean(v1)
v1 = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
v2 = c("Openwebinars","Openwebinars","Openwebinars","Openwebinars","Openwebinars")
v3 = c( 0.0, 1.5, 3.0, 4.5, 6.0, 7.5, 9.0, 10.5, 12.0)
mean(v1)
which(c==10)
which(v1==10)
length(v2)
median(v3)
range(v3)
rev(sort(v3))
v1 = 1:20
v1 = 1:20
v2 = rep("Openwebinars",times=5)
v3 = seq(0,12,by=1.5)
v1
v2
v3
mean(v1)
which(v1==10)
length(v2)
median(v3)
range(v3)
rev(sort(v3))
info = list(nombre="Elisabet",ciudad="Barcelona",amigos.nombre=c("aaa","bbb","ccc"),amigos.edad=c("31","32","33"))
info$amigos.nombre
info[[3]]
info
info[[5]] =
mediaEdad=sapply(info,mean)
info[[5]] =
mediaEdad=sapply(info[[4]],mean)
info[[5]] =
amigos.mediaEdad=sapply(info$amigos.edad,mean)
info$amigos.edad
mean(info$amigos.edad)
typeof(info$amigos.edad)
info = list(nombre="Elisabet",ciudad="Barcelona",amigos.nombre=c("aaa","bbb","ccc"),amigos.edad=c(31,32,33))
info$amigos.edad
mean(info$amigos.edad)
info[[5]] =
amigos.mediaEdad=sapply(info$amigos.edad,mean)
amigos.mediaEdad=sapply(info$amigos.edad,mean)
amigos.mediaEdad
info[[5]]=amigos.mediaEdad
info
amigos.mediaEdad = info[5]
amigos.mediaEdad = info[[5]]
info
edades = info$amigos.edad
media = mean(edades)
personas <- c("DE","BG","ES","AT","BE","FR","BG","HU","HU","ES","DE","FR","GB","CZ","PT",
"ES","GB","FR","BG","CZ","BG","FR","PT","ES","BE","AT","DE","CZ","ES","GB")
factorOrdered = ordered(personas)
factorOrdered
salarios = c(27,15,24,22,16,30,40,21,39,21,49,23,19,19,53,51,33,22,29,40,31,52,44,32,17,23,21,50,22,19)
numPersonas = tapply(salarios,count)
espa = which(factorOrdered == "ES")
length(espa)
espa
sprintf("Los salarios espaÃ±oles son %i, %i, %i, %i, %i", salarios[espa[1]], salarios[espa[2]], salarios[espa[3]],
salarios[espa[4]], salarios[espa[5]])
salarioMedio = tapply(salarios, factorOrdered, mean)
salarioMedio
salarioMedio["FR"]
factorOrdenado[salarios > 50]
factorOrdered[salarios > 50]
vec ->1:36
vec ->c(1:36)
vec->1:36
vec=1:36
vec
vec<-1:36
dim(vec)=c(6,6)
dim(vec)
vec[3,3,4]
arr = array(data=vec, dim=c(3,3,4))
arr
arr[,,2]
matx = matrix(data = vec, nrow = 4, ncol = 9)
matx
matx[4,5]
matrex = matrix(data=vec, nrow = 4, ncol = 18)
matrex
matrex2 = matrix(data = vec, nrow = 3, ncol = 5)
matrex2 = matrix(data = vec, nrow = 3, ncol = 6)
matrex2
mt = vec
dim(mt)=c(6,6)
mt
a = matrix(c(c(2,4),c(2,1),c(3,2)), nrow = 2, ncol = 3)
b = matrix(c(c(1,2),c(1,0),c(1,2)), nrow = 2, ncol = 3)
dim(a)
dim(b)
a*b
a/b+2
outer(a,b,"*")
dim(outer(a,b,"*"))
c = c(a,b)
c
c = cbind(a,b)
c
c = matrix(data = c(a,b), nrow = 4, ncol = 4)
c
a = matrix(c(c(2,4),c(2,1),c(3,2)), nrow = 2, ncol = 3)
b = matrix(c(c(1,2),c(1,0),c(1,2)), nrow = 2, ncol = 3)
c = matrix(data = c(a,b), nrow = 4, ncol = 4)
c
c = rbind(a,b)
c
v = c(2,3,4,1)
mq = cbind(c,v)
mq
diag(mq)
aperm(mq)
personas <- c("DE","BG","ES","AT","BE","FR","BG","HU","HU","ES","DE","FR","GB","CZ","PT", "ES","GB","FR","BG","CZ","BG","FR","PT","ES","BE","AT","DE","CZ","ES","GB")
salarios = c(27,15,24,22,16,30,40,21,39,21,49,23,19,19,53,51,33,22,29,40,31,52,44,32,17,23,21,50,22,19)
fPersonas = factor(personas)
fSalarios = factor(salarios)
frecPerSal = table(fSalarios,fPersonas)
frecPerSal
frecPerSal[">25",]
frecPerSal[">24",]
salario25 = salarios > 25
salario25
fsalario25 = factor(fsalario25)
fsalario25 = factor(salario25)
frecPerSal25 = table(fsalario25,fPersonas)
frecPerSal25
mtcars
attach(mtcars)
carb
mtcars$year = c(randu)
df = data.frame(f=fac,row.names = 1)
paises = c("Francia","Alemania","Italia","EspaÃ±a")
fac = factor(paises)
df = data.frame(f=fac,row.names = 1)
df
mat = matrix(data = 1:16, nrow = 4, ncol = 4)
fac = data.frame(f=fac, m=mat, row.names = 1)
fac = factor(paises)
df = data.frame(f=fac,row.names = 1)
df
mat = matrix(data = 1:16, nrow = 4, ncol = 4)
df = data.frame(f=fac, m=mat, row.names = 1)
df
colnames(mtcars)
rownames(mtcars)
mtcars$year = c(1992:(1992+31))
mtcars
m = as.matrix(mat)
m
mat = matrix(data = 1:16, nrow = 4, ncol = 4)
df = data.frame(f=fac, m=mat, row.names = 1)
m = as.matrix(mat)
m
df
attach(df)
year
attach(mtcars)
year
attach(mtcars)
mtcars
detach(mtcars)
year
detach(mtcars)
year
attach(mtcars)
attach(mtcars)
year
detach(mtcars)
year
detach(mtcars)
year
mtcars
colnames(mtcars)
rownames(mtcars)
mtcars$carb
mtcars[,"carb"]
mtcars[,11]
is.vector(mtcars[,11])
mtcars$year = c(1992:(1992+31))
mtcars
paises = c("Francia","Alemania","Italia","EspaÃ±a")
fac = factor(paises)
df = data.frame(f=fac,row.names = 1)
df
mat = matrix(data = 1:16, nrow = 4, ncol = 4)
df = data.frame(f=fac, m=mat, row.names = 1)
df
m = as.matrix(mat)
m
attach(mtcars)
mtcars
year
detach(mtcars)
year
mtcars["Merc",]
patron = 'Merc'
busqueda = grep(patron, rownames(mtcars))
mtcars[busqueda,]
mtcars(mean(wt))
mercedes = mtcars[busqueda,]
mercedes
pesos = mercedes$wt
pesos
mean(pesos)
mercedes[,1:5]
matriz = as.matrix(mercedes[,1:5])
matriz
is.matrix(matriz)
count(a,b,c,d)
airquality
plot(airquality$Temp,airquality$Ozone)
dotchart(precip)
precip[1:10]
dotchart(precip)
precip[1:10]
dotchart(precip)
plot(airquality$Temp,airquality$Ozone)
precip[1:10]
dotchart(precip)
dotchart(precip[1:10])
precip = precip[1:10]
dotchart(precip)
shiny::runApp('exempleMArr')
runApp('exempleMArr')
runApp('exempleMArr')
runApp('Desktop/projecte/toolsUEB')
