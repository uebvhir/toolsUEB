#
# This is the server logic of a Shiny web application. You can run the 
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
# 
#    http://shiny.rstudio.com/
#

library(shiny)


shinyServer(function(input,output){
  ###############################LOAD FILES###############################
  #####FLOAD TOP TABLE FILES######
  topTab <- reactive({
    validate(
      need(input$file1 != "", "Please Load TopTable files")
    )
    inFile1 <- input$file1
    if (is.null(inFile1)) return(invisible(NULL))
    else {read.csv2(inFile1$datapath, sep=input$sep1, dec=input$dec1, header=TRUE)}
  })
  
  
  #####CUSTOM TOP TABLE INFORMATION######
  output$topTab <- renderDataTable({
    topTab()[,c(1:9)]
  })
  
  #####CUSTOM EXPRESSION MATRIX INFORMATION######
  output$expMat <- renderDataTable({
    topTab()[,c(1,10:19)]
  })
  
  ##ANALYSIS##
  ###############################GRAPHICAL ANALYSIS###############################
  
  #####FILTERING SELECTED GENES TABLE######
  selected <- reactive({
  
    if(input$lfc >= 1){
      sel1 <- topTab()[topTab()[, "adj.P.Val"] <= input$pvalue, ]
      selected <- sel1[sel1[, "logFC"] >= input$lfc, ]
    }else if(input$lfc <= -1){
      sel2 <- topTab()[topTab()[, "adj.P.Val"] <= input$pvalue, ]
      selected <- sel2[sel2[, "logFC"] <= input$lfc, ]
    }
    
  })
  
  #####OUTPUT SELECTED GENES TABLE#######
  output$selectedtable <- renderDataTable({
    data <- selected()[,c(1:7)]
    datatable(data, rownames = FALSE)
  })
  
  data <- reactive({
    data <- selected()[,c(1:7)]
    return(data)
  })
  
  
  ####Download selected genes table#####
  
  output$table1 <- downloadHandler(
    filename = function(){
      "selectedtable.csv"},
    content <- function(file){
      write.csv(selected(),file)
    }
  )
  
  #####VOLCANO PLOT#######
  output$volcano <- renderPlot({
    ex<-as.data.frame(topTab())
    
    with(ex, plot(logFC, -log10(P.Value), pch=20, main="Differentially expressed genes", xlim=c(-5,5)))
    with(subset(ex, adj.P.Val<input$pvalue), points(logFC, -log10(P.Value), pch=20, col="red"))
    with(subset(ex, abs(logFC)>input$lfc), points(logFC, -log10(P.Value), pch=20, col="orange"))
    with(subset(ex, adj.P.Val<.05 & abs(logFC)>input$lfc), points(logFC, -log10(P.Value), pch=20, col="green"))
    with(subset(ex, adj.P.Val<.05 & abs(logFC)>input$lfc), textxy(logFC, -log10(P.Value), labs=SymbolsA, cex=.8))
    
    abline(v=c(-1,1))
  })
  
  #####HEATMAP#######
  output$heatmap <- renderPlot({
    #browser()
    ex<-as.data.frame(selected())
    rownames(ex) <- ex$X
    rownames(ex)
    selGenes <- ex[,c(10:19)]
    m<-data.matrix(selGenes, rownames.force = NA)
    colours <- colorRampPalette(c(input$colNum1, "grey", input$colNum2))(n = input$colorBreaks+1)
    par(mar = rep(2,4))
    y <- scale(m)
    hr <- hclust(as.dist(1-cor(t(y), method="pearson")))
    hc <- hclust(as.dist(1-cor(y, method="pearson")), method="complete")
    mycl  <- cutree(hr, h=max(hr$height)/1.5); 
    mycolhc <-  rainbow(length(unique(mycl)), start=0.1, end=0.9);
    mycolhc <-  mycolhc[as.vector(mycl)]
    heatmap.2(y,  key=T, symkey=F, Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=colours, 
              scale="row", trace="none", RowSideColors=mycolhc, 
              cexRow=0.1, cexCol=0.7)
  })
  
  
  ###Download heatmap##############
  output$plot2 <- downloadHandler(
    filename = function(){
      paste("heatmap", "png", sep = ".")
    },
    content<- function(file){
      png(file)
      
      ex<-as.data.frame(selected())
      rownames(ex) <- ex$X
      rownames(ex)
      selGenes <- ex[,c(10:19)]
      m<-data.matrix(selGenes, rownames.force = NA)
      colours <- colorRampPalette(c(input$colNum1, "grey", input$colNum2))(n = input$colorBreaks+1)
     
      y <- scale(m)
      hr <- hclust(as.dist(1-cor(t(y), method="pearson")))
      hc <- hclust(as.dist(1-cor(y, method="pearson")), method="complete")
      mycl  <- cutree(hr, h=max(hr$height)/1.5); 
      mycolhc <-  rainbow(length(unique(mycl)), start=0.1, end=0.9);
      mycolhc <-  mycolhc[as.vector(mycl)]
      reg <- heatmap.2(y,  key=T, symkey=F, Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), col=colours, 
                        scale="row", trace="none", RowSideColors=mycolhc, 
                        cexRow=0.1, cexCol=0.7)
     
     print(reg)
      dev.off()
    },
    contentType = "image/png"
  )
  
  
  
  ###############################FUNCTIONAL ANALYSIS###############################
  
  topGOdata <- reactive({
    
    ttab <-as.data.frame(topTab())
    rownames(ttab) <- ttab$X
    geneID<-rownames(ttab)
    sel <- selected()
    rownames(sel) <- sel$X
    myInterestingGenes <- rownames(sel)
    geneList <- factor(as.integer(geneID %in% myInterestingGenes))
    names(geneList) <- geneID
    
    affyLib <- paste(annotation(ALL), "db", sep = ".")
    
    topGOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,
                     nodeSize = 10,
                     annot=annFUN.db,
                     affyLib = affyLib)
    return(topGOdata)
  })
  
  output$gotable <- renderDataTable({
    
    resultFisher <- runTest(topGOdata(), algorithm = "classic", statistic = "fisher")
    
    resultKS <- runTest(topGOdata(), algorithm = "classic", statistic = "ks")
    resultKS.elim <- runTest(topGOdata(), algorithm = "elim", statistic = "ks")
    
    gotable <- GenTable(topGOdata(), classicFisher = resultFisher,
                        classicKS = resultKS, elimKS = resultKS.elim,
                        orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
    datatable(gotable, rownames = FALSE)
  })
  
  output$goplot <- renderPlot({
    resultKS.elim <- runTest(topGOdata(), algorithm = "elim", statistic = "ks")
    showSigOfNodes(topGOdata(),
                   score(resultKS.elim), firstSigNodes = 5,
                   useInfo = 'all')
  })
  
  
  ###Download goplot##############
  output$plot3 <- downloadHandler(
    filename = function(){
      paste("plot3", "png", sep = ".")
    },
    content<- function(file){
      png(file)
      
      resultKS.elim <- runTest(topGOdata(), algorithm = "elim", statistic = "ks")
      reg2 <- showSigOfNodes(topGOdata(),
                     score(resultKS.elim), firstSigNodes = 5,
                     useInfo = 'all')
      
      
      print(reg2)
      dev.off()
    },
    contentType = "image/png"
  )
  
})
